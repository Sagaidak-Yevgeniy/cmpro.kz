'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { MessageCircle, X, Send, Phone, Mail, Minimize2, Maximize2 } from 'lucide-react'
import { useState, useEffect } from 'react'
import { useNavigation } from './NavigationContext'

interface ChatSupportProps {
  language: 'ru' | 'kk'
}

const translations = {
  ru: {
    title: '–ü–æ–¥–¥–µ—Ä–∂–∫–∞',
    subtitle: '–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞—à–µ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É',
    placeholder: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...',
    send: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å',
    close: '–ó–∞–∫—Ä—ã—Ç—å',
    minimize: '–°–≤–µ—Ä–Ω—É—Ç—å',
    expand: '–†–∞–∑–≤–µ—Ä–Ω—É—Ç—å',
    phone: '+7 (777) 332-36-76',
    email: 'info@cmpro.kz',
    quickReplies: [
      '–•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã',
      '–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã',
      '–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
      '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è'
    ]
  },
  kk: {
    title: '“ö–æ–ª–¥–∞—É',
    subtitle: '–ë—ñ–∑–¥—ñ“£ –º–∞–º–∞–Ω“ì–∞ —Å“±—Ä–∞“õ “õ–æ–π—ã“£—ã–∑',
    placeholder: '–•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑...',
    send: '–ñ—ñ–±–µ—Ä—É',
    close: '–ñ–∞–±—É',
    minimize: '–ñ—ñ–∫—Ç–µ—É',
    expand: '–ö–µ“£–µ–π—Ç—É',
    phone: '+7 (777) 332-36-76',
    email: 'info@cmpro.kz',
    quickReplies: [
      '–ö—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª“ì—ã–º –∫–µ–ª–µ–¥—ñ',
      '–°“±—Ä–∞“õ—Ç–∞—Ä—ã–º –±–∞—Ä',
      '–ö–µ“£–µ—Å—à—ñ–ª—ñ–∫ “õ–∞–∂–µ—Ç',
      '–û“õ—É “õ“±–Ω—ã'
    ]
  }
}

export default function ChatSupport({ language }: ChatSupportProps) {
  const { isNavigationVisible } = useNavigation()
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [isHovered, setIsHovered] = useState(false)
  const [message, setMessage] = useState('')
  const [messages, setMessages] = useState<Array<{
    id: string
    text: string
    isUser: boolean
    timestamp: Date
  }>>([])
  const t = translations[language]

  useEffect(() => {
    // Add welcome message
    setMessages([
      {
        id: '1',
        text: language === 'ru' 
          ? '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?' 
          : '–°”ô–ª–µ–º! “ö–∞–ª–∞–π –∫”©–º–µ–∫—Ç–µ—Å–µ –∞–ª–∞–º—ã–Ω?',
        isUser: false,
        timestamp: new Date()
      }
    ])
  }, [language])

  const handleSendMessage = () => {
    if (!message.trim()) return

    const userMessage = {
      id: Date.now().toString(),
      text: message,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const userText = message.toLowerCase()
    setMessage('')

    // Smart bot response based on user message
    setTimeout(() => {
      let botResponse = ''
      let shouldOfferWhatsApp = false

      // Check for cost/price related questions
      if (userText.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || userText.includes('—Ü–µ–Ω–∞') || userText.includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') || 
          userText.includes('“õ“±–Ω—ã') || userText.includes('–±–∞“ì–∞—Å—ã') || userText.includes('“õ–∞–Ω—à–∞ —Ç“±—Ä–∞–¥—ã')) {
        botResponse = language === 'ru'
          ? '–í—Å–µ –∫—É—Ä—Å—ã —Å—Ç–æ—è—Ç 30,000 —Ç–µ–Ω–≥–µ –≤ –º–µ—Å—è—Ü –±–µ–∑ —É—á–µ—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∏–¥–æ–∫! üéì\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–ë–∞—Ä–ª—ã“õ –∫—É—Ä—Å—Ç–∞—Ä –∞–π—ã–Ω–∞ 30,000 —Ç–µ“£–≥–µ, –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä“ì–∞–Ω –∂–µ“£—ñ–ª–¥—ñ–∫—Ç–µ—Ä–¥—ñ –µ—Å–µ–ø–∫–µ –∞–ª–º–∞“ì–∞–Ω–¥–∞! üéì\n\n–¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—ã–ø, –∂–∞–∑—ã–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω –±—ñ–ª–≥—ñ“£—ñ–∑ –∫–µ–ª–µ –º–µ? –ñ—ã–ª–¥–∞–º –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—É–≥–µ –Ω–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for course registration
      else if (userText.includes('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è') || userText.includes('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã') || 
               userText.includes('–∂–∞–∑—ã–ª—É') || userText.includes('–∫—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É')) {
        botResponse = language === 'ru'
          ? '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ WhatsApp. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É! üìö\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–ö–µ—Ä–µ–º–µ—Ç! –ö—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É “Ø—à—ñ–Ω WhatsApp –∞—Ä“õ—ã–ª—ã –±—ñ–∑–±–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑. –ë—ñ–∑–¥—ñ“£ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å –∫—É—Ä—Å—Ç—ã —Ç–∞“£–¥–∞—É“ì–∞ –∂”ô–Ω–µ ”©—Ç—ñ–Ω—ñ—à—Ç—ñ —Ä–µ—Å—ñ–º–¥–µ—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ–¥—ñ! üìö\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for consultation requests
      else if (userText.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è') || userText.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é') || 
               userText.includes('–∫–µ“£–µ—Å—à—ñ–ª—ñ–∫') || userText.includes('–∫–µ“£–µ—Å')) {
        botResponse = language === 'ru'
          ? '–ö–æ–Ω–µ—á–Ω–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ WhatsApp –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! üí¨\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '”ò—Ä–∏–Ω–µ! –ë—ñ–∑–¥—ñ“£ –º–∞–º–∞–Ω —Å—ñ–∑–¥—ñ“£ –±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω. –¢–µ–≥—ñ–Ω –∫–µ“£–µ—Å—à—ñ–ª—ñ–∫ “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—ñ“£—ñ–∑! üí¨\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for general questions
      else if (userText.includes('–≤–æ–ø—Ä–æ—Å') || userText.includes('—Å“±—Ä–∞“õ')) {
        botResponse = language === 'ru'
          ? '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp! ü§î\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ “õ—É–∞–Ω–∞-“õ—É–∞–Ω–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω! –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∂”ô–Ω–µ –∂—ã–ª–¥–∞–º –∂–∞—É–∞–ø “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—É–≥–µ –±–æ–ª–∞–¥—ã! ü§î\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Default response
      else {
        botResponse = language === 'ru'
          ? '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp! üì±\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–•–∞–±–∞—Ä–ª–∞–º–∞“£—ã–∑ “Ø—à—ñ–Ω —Ä–∞—Ö–º–µ—Ç! –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∂”ô–Ω–µ –∂—ã–ª–¥–∞–º –∂–∞—É–∞–ø –∞–ª—É “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—É–≥–µ –±–æ–ª–∞–¥—ã! üì±\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }

      const botResponseObj = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isUser: false,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botResponseObj])

      // Auto-redirect to WhatsApp ONLY if user typed their own message (not using quick replies)
      if (shouldOfferWhatsApp) {
        setTimeout(() => {
          const redirectMessage = language === 'ru'
            ? '–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ WhatsApp...'
            : 'WhatsApp-“õ–∞ ”©—Ç—ñ–ø –∂–∞—Ç—ã—Ä–º—ã–∑...'
          
          const redirectObj = {
            id: (Date.now() + 2).toString(),
            text: redirectMessage,
            isUser: false,
            timestamp: new Date()
          }
          setMessages(prev => [...prev, redirectObj])

          setTimeout(() => {
            // Send personalized WhatsApp message based on context
            let whatsappMessage = ''
            if (userText.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || userText.includes('—Ü–µ–Ω–∞') || userText.includes('—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç') || 
                userText.includes('“õ“±–Ω—ã') || userText.includes('–±–∞“ì–∞—Å—ã') || userText.includes('“õ–∞–Ω—à–∞ —Ç“±—Ä–∞–¥—ã')) {
              whatsappMessage = language === 'ru'
                ? '–ü—Ä–∏–≤–µ—Ç! –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –≤ CodeMastersPRO. –í—Å–µ –∫—É—Ä—Å—ã –ø–æ 30,000 —Ç–µ–Ω–≥–µ –≤ –º–µ—Å—è—Ü. –•–æ—á—É —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏!'
                : '–°”ô–ª–µ–º! CodeMastersPRO-–¥–∞ –æ“õ—É “õ“±–Ω—ã “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã. –ë–∞—Ä–ª—ã“õ –∫—É—Ä—Å—Ç–∞—Ä –∞–π—ã–Ω–∞ 30,000 —Ç–µ“£–≥–µ. –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª“ì—ã–º –∫–µ–ª–µ–¥—ñ!'
            } else if (userText.includes('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è') || userText.includes('–∂–∞–∑—ã–ª—É')) {
              whatsappMessage = language === 'ru'
                ? '–ü—Ä–∏–≤–µ—Ç! –•–æ—á—É –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫—É—Ä—Å—ã –≤ CodeMastersPRO. –ü–æ–º–æ–≥–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å!'
                : '–°”ô–ª–µ–º! CodeMastersPRO-–¥–∞ –∫—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª“ì—ã–º –∫–µ–ª–µ–¥—ñ. –°”ô–π–∫–µ—Å –∫—É—Ä—Å—Ç—ã —Ç–∞“£–¥–∞—É“ì–∞ –∫”©–º–µ–∫—Ç–µ—Å—ñ“£—ñ–∑!'
            } else {
              whatsappMessage = language === 'ru'
                ? '–ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫—É—Ä—Å–∞–º CodeMastersPRO'
                : '–°”ô–ª–µ–º! CodeMastersPRO –∫—É—Ä—Å—Ç–∞—Ä—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—à—ñ–ª—ñ–∫ “õ–∞–∂–µ—Ç'
            }
            handleWhatsApp(whatsappMessage)
          }, 1500)
        }, 2000)
      }
    }, 1000)
  }

  const handleQuickReply = (reply: string) => {
    const userMessage = {
      id: Date.now().toString(),
      text: reply,
      isUser: true,
      timestamp: new Date()
    }

    setMessages(prev => [...prev, userMessage])
    const replyText = reply.toLowerCase()

    // Smart bot response based on quick reply
    setTimeout(() => {
      let botResponse = ''
      let shouldOfferWhatsApp = false

      // Check for cost/price related quick replies
      if (replyText.includes('—Å—Ç–æ–∏–º–æ—Å—Ç—å') || replyText.includes('“õ“±–Ω—ã')) {
        botResponse = language === 'ru'
          ? '–í—Å–µ –∫—É—Ä—Å—ã —Å—Ç–æ—è—Ç 30,000 —Ç–µ–Ω–≥–µ –≤ –º–µ—Å—è—Ü –±–µ–∑ —É—á–µ—Ç–∞ –¥–µ–π—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∏–¥–æ–∫! üéì\n\n–•–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è? –ú–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–≤—è–∑–∏ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–ë–∞—Ä–ª—ã“õ –∫—É—Ä—Å—Ç–∞—Ä –∞–π—ã–Ω–∞ 30,000 —Ç–µ“£–≥–µ, –∂“±–º—ã—Å —ñ—Å—Ç–µ–ø —Ç“±—Ä“ì–∞–Ω –∂–µ“£—ñ–ª–¥—ñ–∫—Ç–µ—Ä–¥—ñ –µ—Å–µ–ø–∫–µ –∞–ª–º–∞“ì–∞–Ω–¥–∞! üéì\n\n–¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∞–ª—ã–ø, –∂–∞–∑—ã–ª“ì—ã“£—ã–∑ –∫–µ–ª–µ—Ç—ñ–Ω—ñ–Ω –±—ñ–ª–≥—ñ“£—ñ–∑ –∫–µ–ª–µ –º–µ? –ñ—ã–ª–¥–∞–º –±–∞–π–ª–∞–Ω—ã—Å “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—É–≥–µ –Ω–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for course registration
      else if (replyText.includes('–∑–∞–ø–∏—Å–∞—Ç—å—Å—è') || replyText.includes('–∂–∞–∑—ã–ª“ì—ã–º')) {
        botResponse = language === 'ru'
          ? '–û—Ç–ª–∏—á–Ω–æ! –î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –∫—É—Ä—Å—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤ WhatsApp. –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫—É—Ä—Å –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É! üìö\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–ö–µ—Ä–µ–º–µ—Ç! –ö—É—Ä—Å—Ç–∞—Ä“ì–∞ –∂–∞–∑—ã–ª—É “Ø—à—ñ–Ω WhatsApp –∞—Ä“õ—ã–ª—ã –±—ñ–∑–±–µ–Ω –±–∞–π–ª–∞–Ω—ã—Å—ã“£—ã–∑. –ë—ñ–∑–¥—ñ“£ –º–µ–Ω–µ–¥–∂–µ—Ä —Å—ñ–∑–≥–µ —Å”ô–π–∫–µ—Å –∫—É—Ä—Å—Ç—ã —Ç–∞“£–¥–∞—É“ì–∞ –∂”ô–Ω–µ ”©—Ç—ñ–Ω—ñ—à—Ç—ñ —Ä–µ—Å—ñ–º–¥–µ—É–≥–µ –∫”©–º–µ–∫—Ç–µ—Å–µ–¥—ñ! üìö\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for consultation requests
      else if (replyText.includes('–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è') || replyText.includes('–∫–µ“£–µ—Å—à—ñ–ª—ñ–∫')) {
        botResponse = language === 'ru'
          ? '–ö–æ–Ω–µ—á–Ω–æ! –ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤—Å–µ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã. –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ WhatsApp –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏! üí¨\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '”ò—Ä–∏–Ω–µ! –ë—ñ–∑–¥—ñ“£ –º–∞–º–∞–Ω —Å—ñ–∑–¥—ñ“£ –±–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ –∂–∞—É–∞–ø –±–µ—Ä—É–≥–µ –¥–∞–π—ã–Ω. –¢–µ–≥—ñ–Ω –∫–µ“£–µ—Å—à—ñ–ª—ñ–∫ “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—ñ“£—ñ–∑! üí¨\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }
      // Check for general questions
      else if (replyText.includes('–≤–æ–ø—Ä–æ—Å') || replyText.includes('—Å“±—Ä–∞“õ')) {
        botResponse = language === 'ru'
          ? '–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã! –î–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp! ü§î\n\n–ò–ª–∏ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∑–¥–µ—Å—å!'
          : '–°—ñ–∑–¥—ñ“£ —Å“±—Ä–∞“õ—Ç–∞—Ä—ã“£—ã–∑“ì–∞ “õ—É–∞–Ω–∞-“õ—É–∞–Ω–∞ –∂–∞—É–∞–ø –±–µ—Ä–µ–º—ñ–Ω! –¢–æ–ª—ã“õ –∞“õ–ø–∞—Ä–∞—Ç –∂”ô–Ω–µ –∂—ã–ª–¥–∞–º –∂–∞—É–∞–ø “Ø—à—ñ–Ω WhatsApp-“õ–∞ ”©—Ç—É–≥–µ –±–æ–ª–∞–¥—ã! ü§î\n\n–ù–µ–º–µ—Å–µ –º“±–Ω–¥–∞ –±–∞—Å“õ–∞ —Å“±—Ä–∞“õ—Ç–∞—Ä “õ–æ—é“ì–∞ –±–æ–ª–∞–¥—ã!'
        shouldOfferWhatsApp = true
      }

      const botResponseObj = {
        id: (Date.now() + 1).toString(),
        text: botResponse,
        isUser: false,
        timestamp: new Date()
      }
      setMessages(prev => [...prev, botResponseObj])

      // For quick replies, show additional options instead of auto-redirecting
      if (shouldOfferWhatsApp) {
        setTimeout(() => {
          const additionalOptionsMessage = language === 'ru'
            ? '–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?'
            : '–°—ñ–∑–¥—ñ —Ç–∞“ì—ã –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã?'
          
          const additionalOptionsObj = {
            id: (Date.now() + 2).toString(),
            text: additionalOptionsMessage,
            isUser: false,
            timestamp: new Date()
          }
          setMessages(prev => [...prev, additionalOptionsObj])
        }, 1000)
      }
    }, 1000)
  }

  const handleWhatsApp = (customMessage?: string) => {
    let message = customMessage
    if (!message) {
      message = language === 'ru' 
        ? '–ü—Ä–∏–≤–µ—Ç! –ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –∫—É—Ä—Å–∞–º CodeMastersPRO'
        : '–°”ô–ª–µ–º! CodeMastersPRO –∫—É—Ä—Å—Ç–∞—Ä—ã —Ç—É—Ä–∞–ª—ã –∫–µ“£–µ—Å—à—ñ–ª—ñ–∫ “õ–∞–∂–µ—Ç';
    }
    const encodedMessage = encodeURIComponent(message);
    window.open(`https://wa.me/77773323676?text=${encodedMessage}`, '_blank');
  }

  const handleBackdropClick = (e: React.MouseEvent) => {
    if (e.target === e.currentTarget) {
      setIsOpen(false);
    }
  }

  const toggleMinimize = () => {
    setIsMinimized(!isMinimized)
  }

  return (
    <>
      {/* Chat Button */}
      <AnimatePresence>
        {isNavigationVisible && (
          <motion.div
            initial={{ opacity: 0, scale: 0.8, x: -20 }}
            animate={{ opacity: 1, scale: 1, x: 0 }}
            exit={{ opacity: 0, scale: 0.8, x: -20 }}
            transition={{ delay: 0.1 }}
            className="fixed bottom-4 left-2 sm:left-4 z-40"
            onMouseEnter={() => setIsHovered(true)}
            onMouseLeave={() => setIsHovered(false)}
          >
            <motion.button
              whileHover={{ scale: 1.1, rotate: -5, opacity: 1 }}
              whileTap={{ scale: 0.9 }}
              onClick={() => setIsOpen(true)}
              className="relative w-12 h-12 bg-gradient-to-r from-primary-500 to-secondary-500 text-white rounded-full shadow-2xl hover:shadow-xl transition-all duration-300 flex items-center justify-center border-2 border-white/20 backdrop-blur-sm transition-opacity duration-300"
              style={{ opacity: 0.85 }}
              animate={{
                boxShadow: isHovered
                  ? '0 20px 40px rgba(59, 130, 246, 0.4)'
                  : '0 10px 30px rgba(59, 130, 246, 0.3)'
              }}
              transition={{ duration: 0.3 }}
              aria-label="Chat support"
            >
              {/* Animated background */}
              <div className="absolute inset-0 rounded-full bg-gradient-to-r from-white/20 to-transparent animate-pulse" />

              {/* Icon */}
              <MessageCircle className="w-5 h-5 relative z-10" />

              {/* Floating particles */}
              <div className="absolute inset-0 rounded-full overflow-hidden">
                {[...Array(4)].map((_, i) => (
                  <motion.div
                    key={i}
                    className="absolute w-1 h-1 bg-white/60 rounded-full"
                    style={{
                      top: `${20 + (i * 20)}%`,
                      left: `${20 + (i * 20)}%`,
                    }}
                    animate={{
                      scale: [0, 1, 0],
                      opacity: [0, 1, 0],
                      y: [0, -8, 0],
                      x: [0, Math.random() * 6 - 3, 0]
                    }}
                    transition={{
                      duration: 2,
                      repeat: Infinity,
                      delay: i * 0.3,
                      ease: "easeInOut"
                    }}
                  />
                ))}
              </div>
            </motion.button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <>
            {/* Backdrop for mobile */}
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              className="fixed inset-0 bg-black/20 backdrop-blur-sm z-[60] sm:hidden"
              onClick={handleBackdropClick}
            />
            
            <motion.div
              initial={{ opacity: 0, scale: 0.8, y: 20 }}
              animate={{ opacity: 1, scale: 1, y: 0 }}
              exit={{ opacity: 0, scale: 0.8, y: 20 }}
              transition={{ duration: 0.3, ease: 'easeOut' }}
              className="fixed bottom-16 left-2 right-2 sm:bottom-4 sm:left-4 sm:right-auto z-[70] w-auto sm:w-80 max-w-[calc(100vw-1rem)] bg-white/95 dark:bg-gray-800/95 backdrop-blur-sm rounded-2xl shadow-custom overflow-hidden pointer-events-auto border border-light transition-all duration-300"
              style={{
                height: isMinimized ? '60px' : '400px',
                opacity: isHovered ? 1 : 0.95
              }}
              onMouseEnter={() => setIsHovered(true)}
              onMouseLeave={() => setIsHovered(false)}
            >
              {/* Header */}
              <div className="bg-gradient-to-r from-primary-500 to-secondary-500 p-3 text-white">
                <div className="flex items-center justify-between">
                  <div className="min-w-0 flex-1">
                    <h3 className="font-semibold text-sm truncate">{t.title}</h3>
                    {!isMinimized && (
                      <p className="text-xs text-white/80 truncate">{t.subtitle}</p>
                    )}
                  </div>
                  <div className="flex items-center space-x-1">
                    <button
                      onClick={toggleMinimize}
                      className="text-white hover:text-gray-200 transition-colors p-1"
                      title={isMinimized ? t.expand : t.minimize}
                    >
                      {isMinimized ? (
                        <Maximize2 className="w-4 h-4" />
                      ) : (
                        <Minimize2 className="w-4 h-4" />
                      )}
                    </button>
                    <button
                      onClick={() => setIsOpen(false)}
                      className="text-white hover:text-gray-200 transition-colors p-1"
                      title={t.close}
                    >
                      <X className="w-4 h-4" />
                    </button>
                  </div>
                </div>
              </div>

              {/* Content - Hidden when minimized */}
              {!isMinimized && (
                <>
                  {/* Messages */}
                  <div className="h-48 overflow-y-auto p-3 space-y-2">
                    {messages.map((msg) => (
                      <div
                        key={msg.id}
                        className={`flex ${msg.isUser ? 'justify-end' : 'justify-start'}`}
                      >
                        <div
                          className={`max-w-[80%] px-3 py-2 rounded-lg ${
                            msg.isUser
                              ? 'bg-primary-500 text-white'
                              : 'bg-gray-100 dark:bg-gray-700 text-primary-dark'
                          }`}
                        >
                          <p className="text-sm leading-relaxed break-words whitespace-pre-line">{msg.text}</p>
                          <p className="text-xs opacity-70 mt-1">
                            {msg.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                          </p>
                        </div>
                      </div>
                    ))}
                  </div>

                  {/* Quick Replies */}
                  {(messages.length === 1 || (messages.length > 1 && messages[messages.length - 1].text.includes('–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?') || messages[messages.length - 1].text.includes('–°—ñ–∑–¥—ñ —Ç–∞“ì—ã –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã?'))) && (
                    <div className="px-3 pb-2">
                      <div className="flex flex-wrap gap-1">
                        {t.quickReplies.map((reply, index) => (
                          <button
                            key={index}
                            onClick={() => handleQuickReply(reply)}
                            className="px-2 py-1 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-primary-dark text-xs rounded-full transition-colors break-words"
                          >
                            {reply}
                          </button>
                        ))}
                      </div>
                    </div>
                  )}

                  {/* WhatsApp Button - Show after bot responses to quick replies */}
                  {messages.length > 1 && (messages[messages.length - 1].text.includes('–ß—Ç–æ –µ—â–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?') || messages[messages.length - 1].text.includes('–°—ñ–∑–¥—ñ —Ç–∞“ì—ã –Ω–µ “õ—ã–∑—ã“õ—Ç—ã—Ä–∞–¥—ã?')) && (
                    <div className="px-3 pb-2">
                      <button
                        onClick={() => handleWhatsApp()}
                        className="w-full px-3 py-2 bg-green-500 hover:bg-green-600 text-white text-sm rounded-lg transition-colors flex items-center justify-center space-x-2"
                      >
                        <MessageCircle className="w-4 h-4" />
                        <span>{language === 'ru' ? '–ü–µ—Ä–µ–π—Ç–∏ –≤ WhatsApp' : 'WhatsApp-“õ–∞ ”©—Ç—É'}</span>
                      </button>
                    </div>
                  )}

                  {/* Input */}
                  <div className="p-3 border-t border-gray-200 dark:border-gray-600">
                    <div className="flex space-x-2">
                      <input
                        type="text"
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                        placeholder={t.placeholder}
                        className="flex-1 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 text-sm bg-white dark:bg-gray-700 text-primary-dark"
                      />
                      <button
                        onClick={handleSendMessage}
                        className="px-3 py-2 bg-primary-500 text-white rounded-lg hover:bg-primary-600 transition-colors flex-shrink-0"
                      >
                        <Send className="w-4 h-4" />
                      </button>
                    </div>
                  </div>

                  {/* Contact Info */}
                  <div className="px-3 pb-3">
                    <div className="flex items-center justify-between text-xs text-gray-500 dark:text-gray-400">
                      <button
                        onClick={() => handleWhatsApp()}
                        className="flex items-center space-x-1 hover:text-primary-500 transition-colors flex-1 min-w-0"
                      >
                        <MessageCircle className="w-3 h-3 flex-shrink-0" />
                        <span className="truncate">WhatsApp</span>
                      </button>
                      <a
                        href={`tel:${t.phone}`}
                        className="flex items-center space-x-1 hover:text-primary-500 transition-colors flex-1 min-w-0"
                      >
                        <Phone className="w-3 h-3 flex-shrink-0" />
                        <span className="truncate hidden sm:inline">{t.phone}</span>
                        <span className="truncate sm:hidden">–ó–≤–æ–Ω–æ–∫</span>
                      </a>
                      <a
                        href={`mailto:${t.email}`}
                        className="flex items-center space-x-1 hover:text-primary-500 transition-colors flex-1 min-w-0"
                      >
                        <Mail className="w-3 h-3 flex-shrink-0" />
                        <span className="truncate hidden sm:inline">{t.email}</span>
                        <span className="truncate sm:hidden">Email</span>
                      </a>
                    </div>
                  </div>
                </>
              )}
            </motion.div>
          </>
        )}
      </AnimatePresence>
    </>
  )
}
